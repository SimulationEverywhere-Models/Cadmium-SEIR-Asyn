
input_types = {one input R>=0 per population that this population depends on}
output_types = {one R>=0}

state = {
    population {R >= 0},
    pop_delta {R >=(-population)},
    other_pops {map of population name to R>=0},
    constants {map of simulation constant name to R}
}

confluence = function(dt, state, input){
    do delta_int
    do delta_ext
}

delta_int = function(state){
    state.population += state.pop_delta*const_delta_t;
    state.pop_delta = 0;
    return state;
}

delta_ext = function(_, state, inputs){
    for in_pop in inputs{
        update state.other_pops to contain the new value
    }
    state.pop_delta = recalculate the new pop_delta with the new other_pops values
    return state
}

time_advance = function(_){
    return const_delta_t;
}

output = function(state){
    return state.population + state.pop_delta*const_delta_t;
}
